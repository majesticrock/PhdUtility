# mrockConfig.cmake.in
@PACKAGE_INIT@

# List of available components
set(mrock_AVAILABLE_COMPONENTS Utility SymbolicOperators)

# Handle COMPONENTS
if (mrock_FIND_COMPONENTS)
    foreach(component IN LISTS mrock_FIND_COMPONENTS)
        if (component STREQUAL "Utility")
            include("${CMAKE_CURRENT_LIST_DIR}/Utility/UtilityConfig.cmake")
            if (TARGET Utility)
                list(APPEND mrock_LIBRARIES Utility)
                list(APPEND mrock_INCLUDE_DIRS "$<TARGET_PROPERTY:Utility,INTERFACE_INCLUDE_DIRECTORIES>")
            else()
                message(FATAL_ERROR "Component Utility requested but not found")
            endif()
        elseif (component STREQUAL "SymbolicOperators")
            include("${CMAKE_CURRENT_LIST_DIR}/SymbolicOperators/SymbolicOperatorsConfig.cmake")
            if (TARGET SymbolicOperators)
                list(APPEND mrock_LIBRARIES SymbolicOperators)
                list(APPEND mrock_INCLUDE_DIRS "$<TARGET_PROPERTY:SymbolicOperators,INTERFACE_INCLUDE_DIRECTORIES>")
            else()
                message(FATAL_ERROR "Component SymbolicOperators requested but not found")
            endif()
        else()
            message(FATAL_ERROR "Unknown component: ${component}")
        endif()
    endforeach()
else()
    # Default behavior if no COMPONENTS are specified: include everything
    include("${CMAKE_CURRENT_LIST_DIR}/Utility/UtilityConfig.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/SymbolicOperators/SymbolicOperatorsConfig.cmake")

    if (TARGET mrock::Utility)
        list(APPEND mrock_LIBRARIES mrock::Utility)
        list(APPEND mrock_INCLUDE_DIRS "$<TARGET_PROPERTY:mrock::Utility,INTERFACE_INCLUDE_DIRECTORIES>")
    endif()
    if (TARGET mrock::SymbolicOperators)
        list(APPEND mrock_LIBRARIES mrock::SymbolicOperators)
        list(APPEND mrock_INCLUDE_DIRS "$<TARGET_PROPERTY:mrock::SymbolicOperators,INTERFACE_INCLUDE_DIRECTORIES>")
    endif()
endif()

# Ensure all required components are found
check_required_components(mrock)

# Export package variables
set(mrock_VERSION "@PROJECT_VERSION@")
set(mrock_FOUND TRUE)
